import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {
    public static int gemstones(List<String> arr) {
        int n = arr.size();
        int ch[]= new int[26];
        int count=0;
        for(int i=0; i<n; i++){
            String cur = arr.get(i);
            int size = cur.length();
            HashSet<Character> hs = new HashSet<Character>();
            
            for(int j=0; j<size; j++){
                hs.add(cur.charAt(j));
            }
            Iterator<Character> itr = hs.iterator();
            while(itr.hasNext()){
                ch[itr.next()-'a']++;
            }
        }
         for(int k=0;k<26;k++){
            if(ch[k]==n){
                count++;
            }
         }
        
        return count;
    }

}


public class Gemstones {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> arr = IntStream.range(0, n).mapToObj(i -> {
            try {
                return bufferedReader.readLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .collect(toList());

        int result = Result.gemstones(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
